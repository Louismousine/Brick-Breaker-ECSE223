class GameOccurence {

gameState {
   
    Idle {
      startGame() [hasEnoughBlockAssignments()] / { 
      	doCreateScore();
      	doGetCurrentLevelBlocks();

      } -> Paused;
      startGame() [!hasEnoughBlockAssignments()] / { 
      	doCreateScore();
      	doGetCurrentLevelBlocks();
      	doPlaceRandomBlocks();

      } -> Paused;
    }
    
    Paused { 
      spaceBarHit() -> Play;
    }
    
    Play {
      spaceBarHit() -> Paused;
      
      move() [isBlockHit() && isLastBlockHit()] / { 
        doDeleteBlock(); 
        doIncrementLevel();
        doGetCurrentLevelBlocks();
        if(!hasEnoughBlockAssignments()){
        doPlaceRandomBlocks();
        }

      } -> Paused;
      
      move() [isWallHit()] / { 
      	doWallHit();
      	doMoveBall();
      } -> Play;
      
      move() [isPaddleHit()] / { 
      	doPaddleHit();
      	doMoveBall();
      } -> Play;
      
      move() [isOutOfBounds() && hasRemainingLives()] / { 
      	doDecrementLifeCount();
      	doResetBallPosition();

      } -> Paused;
      
      move() [isBlockHit() && isLastBlockHit() && isLastLevel() ] / {
      	doDeleteBlock();

      } -> Done;
      
      move() [isOutOfBounds() && !hasRemainingLives()] / {Â 

      } -> Done;
      
      move() [isBlockHit() && !isLastBlockHit()] / {
      	doDeleteBlock();
      	doBlockHit();
      	doMoveBall();
      } -> Play;
     
      move() [!(isBlockHit() && isWallHit() && isPaddleHit() && isOutOfBounds())] / { 
      	doMoveBall();
      }-> Play;
    }
    
    Done {
    	entry / { doDeleteCurrentGame(); }
    }
}

private boolean isBlockHit() {}
private boolean isLastBlockHit() {}
private boolean isLastLevel() {}
private boolean isPaddleHit() {}
private boolean isWallHit() {}
private boolean isOutOfBounds() {}
private boolean hasEnoughBlockAssignments() {}
private boolean hasRemainingLives() {}
private void doDeleteBlock(){} //don't forget to increment score when block is deleted //don't forget to update score
private void doDeleteCurrentGame(){}
private void doCreateScore(){}
private void doGetCurrentLevelBlocks(){}
private void doPlaceRandomBlocks(){}
private void doIncrementLevel(){}
private void doDecrementLifeCount(){}
private void doResetBallPosition(){}
private void doWallHit(){}
private void doBlockHit(){}
private void doPaddleHit(){}
private Double getNextX(){}
private Double getNextY(){}
private void doMoveBall(){}
}

