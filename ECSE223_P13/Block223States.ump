class PlayedGame {
	depend java.awt.geom.Line2D;
	depend java.awt.geom.*;
	depend java.awt.Point;
	depend ca.mcgill.ecse223.block.model.BouncePoint;
	depend ca.mcgill.ecse223.block.model.BouncePoint.BounceDirection;
	depend math.geom2d.conic.*;
  // State Machine
  
  playStatus {
    Ready {
      entry / { doSetup(); }
      play -> Moving;
    }
    Moving {
      pause -> Paused;
      move [hitPaddle()] / { doHitPaddleOrWall(); } -> Moving;
      move [isOutOfBoundsAndLastLife()] / { doOutOfBounds(); } -> GameOver;
      move [isOutOfBounds()] / { doOutOfBounds(); } -> Paused;
      move [hitLastBlockAndLastLevel()] / { doHitBlock(); } -> GameOver;
      move [hitLastBlock()] / { doHitBlockNextLevel(); } -> Ready;
      move [hitBlock()] / { doHitBlock(); } -> Moving;
      move [hitWall()] / { doHitPaddleOrWall(); } -> Moving;
      move / { doHitNothingAndNotOutOfBounds(); } -> Moving;
    }
    Paused {
      play -> Moving;
    }
    GameOver {
      entry / { doGameOver(); }
    }
  }
  
  // Guards
  
   private boolean hitPaddle() {
    BouncePoint bp = calculateBouncePointPaddle();
    this.setBounce(bp);
    return bp != null;
  }
  
    private BouncePoint calculateBouncePointPaddle() {
			Rectangle2D paddleRect = new Rectangle2D.Double();
		Line2D l = new Line2D.Double();
		ArrayList<BouncePoint> intersect = new ArrayList<>();
		int counter = 0;
		l.setLine(getCurrentBallX(), getCurrentBallY(), getCurrentBallX() + ballDirectionX,
				getCurrentBallY() + ballDirectionY);
		math.geom2d.line.Line2D l1= new math.geom2d.line.Line2D(getCurrentBallX(), getCurrentBallY(), getCurrentBallX() + ballDirectionX,
				getCurrentBallY() + ballDirectionY);
		paddleRect.setFrame(getCurrentPaddleX()- Ball.BALL_DIAMETER / 2,
				getCurrentPaddleY() - Ball.BALL_DIAMETER / 2, getCurrentPaddleX()+getCurrentPaddleLength() + Ball.BALL_DIAMETER/2,
				getCurrentPaddleY() + Paddle.PADDLE_WIDTH);
		if (paddleRect.intersectsLine(l)) {
			Line2D A = new Line2D.Double();
			A.setLine(getCurrentPaddleX() + getCurrentPaddleLength(), getCurrentPaddleY() - Ball.BALL_DIAMETER / 2,
					getCurrentPaddleX(), getCurrentPaddleY());
			Line2D B = new Line2D.Double();
			B.setLine(getCurrentPaddleX()- Ball.BALL_DIAMETER / 2, getCurrentPaddleY(),
					getCurrentPaddleX(),
					getCurrentPaddleY() + Paddle.PADDLE_WIDTH);
			Line2D C = new Line2D.Double();
			C.setLine(getCurrentPaddleX()+getCurrentPaddleLength() + Ball.BALL_DIAMETER / 2, getCurrentPaddleY(),
					getCurrentPaddleX() + getCurrentPaddleLength(), getCurrentPaddleY() + Paddle.PADDLE_WIDTH);
			CircleArc2D F = new CircleArc2D(new math.geom2d.Point2D(getCurrentPaddleX()+getCurrentPaddleLength(),getCurrentPaddleY()),
					Ball.BALL_DIAMETER/2.,0,Math.PI/2,false);
			CircleArc2D E = new CircleArc2D(new math.geom2d.Point2D(getCurrentPaddleX(),getCurrentPaddleY()),
					Ball.BALL_DIAMETER/2.,Math.PI/2,Math.PI,false);
			ArrayList<math.geom2d.Point2D> EIntersections = E.intersections(l1);
			ArrayList<math.geom2d.Point2D> FIntersections = F.intersections(l1);
			if (C.intersectsLine(l)) {
				intersect.add(new BouncePoint(calculateIntersectionPoint(C, l).x, calculateIntersectionPoint(C, l).y,
						BounceDirection.FLIP_X));
				counter++;
			}
			if (A.intersectsLine(l)) {
				intersect.add(new BouncePoint(calculateIntersectionPoint(A, l).x, calculateIntersectionPoint(A, l).y,
						BounceDirection.FLIP_Y));
				counter++;
			}
			if (B.intersectsLine(l)) {
				intersect.add(new BouncePoint(calculateIntersectionPoint(B, l).x, calculateIntersectionPoint(B, l).y,
						BounceDirection.FLIP_X));
				counter++;
			}
			
			if(EIntersections.size()>0) {
				for(int a = 0; a<EIntersections.size();a++) {
					if(currentBallX>getCurrentPaddleX()-getCurrentPaddleLength())
					intersect.add(new BouncePoint(EIntersections.get(a).getX(), EIntersections.get(a).getY(), BounceDirection.FLIP_Y));
					else intersect.add(new BouncePoint(EIntersections.get(a).getX(), EIntersections.get(a).getY(), BounceDirection.FLIP_X));
					counter++;
				}
			}
			
			if(FIntersections.size()>0) {
				for(int a = 0; a<FIntersections.size();a++) {
					if(currentBallX>getCurrentPaddleX())
					intersect.add(new BouncePoint(FIntersections.get(a).getX(), FIntersections.get(a).getY(), BounceDirection.FLIP_X));
					else intersect.add(new BouncePoint(FIntersections.get(a).getX(), FIntersections.get(a).getY(), BounceDirection.FLIP_Y));
					counter++;
				}
			}

			BouncePoint closest = null;
			if (counter == 1) {
				closest = intersect.get(0);
			} else {
				for (int a = 0; a < counter - 1; a++) {
					if (isCloser(intersect.get(a), intersect.get(a + 1))) {
						closest = intersect.get(a);
					} else {
						closest = intersect.get(a + 1);
					}
				}
			}
			return closest;

		} else {
			return null;
		}
}

	private BouncePoint calculateBouncePointBlock(PlayedBlockAssignment pblock) {
	// TODO Auto-generated method stub
	return null;
}

  private void bounceBall() {
	// get params
		double distanceX = getBallDirectionX();
		double distanceY = getBallDirectionY();
		double positionX = getCurrentBallX();
		double positionY = getCurrentBallY();
		double bouncePointX = getBounce().getX();
		double bouncePointY = getBounce().getY();
		double distanceLeftX = distanceX - Math.abs(bouncePointX - positionX);
		double distanceLeftY = distanceY - Math.abs(bouncePointY - positionY);
		int signX = 1;
		int signY = 1;
		
		if(Math.signum(ballDirectionX)<0)
			signX = -1;
		if(Math.signum(ballDirectionY)<0)
			signY = -1;
		

		BounceDirection BD = getBounce().getDirection();
		// flip the direction
		if (distanceLeftX != 0 || distanceLeftY != 0) {
			if (BD.equals(BounceDirection.FLIP_BOTH)) {

				
				ballDirectionX*=-1;
				ballDirectionY*=-1;
				if(Math.signum(ballDirectionX)<0)
					signX = -1;
				if(Math.signum(ballDirectionY)<0)
					signY = -1;
				currentBallX = bouncePointX + distanceLeftX * signX;
				currentBallY = bouncePointY + distanceLeftY * signY;
			}
			if (BD.equals(BounceDirection.FLIP_Y)) {
				if(Math.signum(ballDirectionX)<0)
					signX = -1;
				ballDirectionX+= 0.1 * Math.abs(ballDirectionY) * signX;
				signX = 1;
				ballDirectionY*=-1;
				if(Math.signum(ballDirectionY)<0)
					signY = -1;
				if(Math.signum(ballDirectionX)<0)
					signX = -1;
				
				currentBallY = bouncePointY + distanceLeftY * signY;
				currentBallX = bouncePointX + (distanceLeftX + 0.1 * distanceLeftY)* signX;
			}
			if (BD.equals(BounceDirection.FLIP_X)) {
				if(Math.signum(ballDirectionY)<0)
					signY = -1;
				ballDirectionY += 0.1 * Math.abs(ballDirectionX) * signY;
				signY = 1;
				ballDirectionX*=-1;
				if(Math.signum(ballDirectionY)<0)
					signY = -1;
				if(Math.signum(ballDirectionX)<0)
					signX = -1;
				
				currentBallX = bouncePointX + distanceLeftX * signX;
				currentBallY = bouncePointY + (distanceLeftY + 0.1 * distanceLeftX)* signY;
				
			}
		}


}

  private boolean isOutOfBoundsAndLastLife() {
    boolean outOfBounds = false;
    
    if (lives == 1) {
    	outOfBounds = this.isBallOutOfBounds();
    }
    return outOfBounds;
  }
  
  private boolean isOutOfBounds() {
    boolean outOfBounds = this.isBallOutOfBounds();
    return outOfBounds;
  }
  	private Point calculateIntersectionPoint(Line2D s, Line2D d) {
		double a1 = s.getY2() - s.getY1();
		double b1 = s.getX1() - s.getX2();
		double c1 = a1 * s.getX1() + b1 * s.getY1();
		
		double a2 = d.getY2() - d.getY1();
		double b2 = d.getX1() - d.getX2();
		double c2 = a2 * d.getX1() + b2 * d.getY1();
		
		double delta = a1*b2-a2*b1;
		
		Point pt = new Point();
		pt.setLocation((b2*c1-b1*c2)/delta,(a1*c2-a2*c1)/delta);
		System.out.println((b2*c1-b1*c2)/delta+ " " + (a1*c2-a2*c1)/delta);
		return pt;
	}
  
  private boolean hitLastBlockAndLastLevel() {
    Game game = this.getGame();
    	int nrLevels = game.numberOfLevels();
    	this.setBounce(null);
    	if(nrLevels==currentLevel){
    		int nrBlocks = this.numberOfBlocks();
    		if(nrBlocks ==1){
    			PlayedBlockAssignment block = this.getBlock(0);
    			BouncePoint bp = this.calculateBouncePointBlock(block);
    			this.setBounce(bp);
    			return bp != null;
    		}
    	}
    return false;
  }
  
  private boolean hitLastBlock(){
    int nrBlocks = this.numberOfBlocks();
    	this.setBounce(null);
    	if(nrBlocks == 1){
    		PlayedBlockAssignment block = this.getBlock(0);
    		BouncePoint bp = this.calculateBouncePointBlock(block);
    		this.setBounce(bp);
    		return bp != null;	
    	}
    return false;
  }
  
  private boolean hitBlock() {
    	int nrBlocks = this.numberOfBlocks();
    	this.setBounce(null);
    	for(int i=0; i<nrBlocks; i++){
    		PlayedBlockAssignment block = getBlock(i);
    		BouncePoint bp = this.calculateBouncePointBlock(block);
    		BouncePoint bounce = this.getBounce();
    		boolean closer = isCloser(bp, bounce);
    		
    		if(closer){
    			this.setBounce(bp);
    		}   		
    	}
    	return this.getBounce() != null;
  }
  
  private boolean hitWall() {
    BouncePoint bp = calculateBouncePointWall();
    this.setBounce(bp);
    return bp != null;
  }
  
    private BouncePoint calculateBouncePointWall() {
BouncePoint bp = null;
		Line2D l = new Line2D.Double();
		l.setLine(getCurrentBallX(), getCurrentBallY(), getCurrentBallX() + ballDirectionX,
				getCurrentBallY() + ballDirectionY);
		Line2D A = new Line2D.Double();
		Line2D B = new Line2D.Double();
		Line2D C = new Line2D.Double();
		A.setLine(Ball.BALL_DIAMETER / 2, Ball.BALL_DIAMETER / 2, Ball.BALL_DIAMETER / 2, Game.PLAY_AREA_SIDE);
		B.setLine(Ball.BALL_DIAMETER / 2, Ball.BALL_DIAMETER / 2, Game.PLAY_AREA_SIDE - Ball.BALL_DIAMETER / 2,
				Ball.BALL_DIAMETER / 2);
		C.setLine(Game.PLAY_AREA_SIDE - Ball.BALL_DIAMETER / 2, Ball.BALL_DIAMETER / 2,
				Game.PLAY_AREA_SIDE - Ball.BALL_DIAMETER / 2, Game.PLAY_AREA_SIDE);

		if (A.intersectsLine(l) && B.intersectsLine(l)) {

			if (calculateIntersectionPoint(A, l).equals(calculateIntersectionPoint(B, l))) {
				bp = new BouncePoint(calculateIntersectionPoint(A, l).x, calculateIntersectionPoint(A, l).y,
						BounceDirection.FLIP_BOTH);
			} else {
				bp = new BouncePoint(Ball.BALL_DIAMETER / 2, Ball.BALL_DIAMETER / 2, BounceDirection.FLIP_BOTH);
			}

		} else if (B.intersectsLine(l) && C.intersectsLine(l)) {
			if (calculateIntersectionPoint(C, l).equals(calculateIntersectionPoint(B, l))) {
				bp = new BouncePoint(calculateIntersectionPoint(C, l).x, calculateIntersectionPoint(C, l).y,
						BounceDirection.FLIP_BOTH);
			} else {
				bp = new BouncePoint(Game.PLAY_AREA_SIDE - Ball.BALL_DIAMETER / 2, Ball.BALL_DIAMETER / 2,
						BounceDirection.FLIP_BOTH);
			}

		} else if (A.intersectsLine(l)) {

			bp = new BouncePoint(calculateIntersectionPoint(A, l).x, calculateIntersectionPoint(A, l).y,
					BounceDirection.FLIP_X);

		} else if (C.intersectsLine(l)) {

			bp = new BouncePoint(calculateIntersectionPoint(C, l).x, calculateIntersectionPoint(C, l).y,
					BounceDirection.FLIP_X);

		} else if (B.intersectsLine(l)) {

			bp = new BouncePoint(calculateIntersectionPoint(B, l).x, calculateIntersectionPoint(B, l).y,
					BounceDirection.FLIP_Y);
		}

		return bp;

}
  
  // Actions
  
  private void doSetup() {
    this.resetCurrentBallX();
	   this.resetCurrentBallY();
	   this.resetBallDirectionX();
	   this.resetBallDirectionY();	   
	   this.resetCurrentPaddleX();
	   Game game = this.getGame();
	   Level level = game.getLevel(this.getCurrentLevel() - 1);
	   List<BlockAssignment> assignments = level.getBlockAssignments();
	   
	   for(BlockAssignment assignment : assignments) {
		   PlayedBlockAssignment pblock = new PlayedBlockAssignment(
				   Game.WALL_PADDING + (Block.SIZE + Game.COLUMNS_PADDING) * (assignment.getGridHorizontalPosition() - 1),
				   Game.WALL_PADDING + (Block.SIZE + Game.ROW_PADDING) * (assignment.getGridVerticalPosition() - 1),
				   assignment.getBlock(),
				   this
				   );
	   }
	   
	   int numberOfBlocks = assignments.size();
	   int maxHor = (1+(Game.PLAY_AREA_SIDE-2*Game.WALL_PADDING-Block.SIZE)/(Block.SIZE+Game.COLUMNS_PADDING));
	   int maxVer = (1+(Game.PLAY_AREA_SIDE-Paddle.VERTICAL_DISTANCE-Game.WALL_PADDING-Paddle.PADDLE_WIDTH-Ball.BALL_DIAMETER-Block.SIZE)/(Block.SIZE+Game.ROW_PADDING));
	   int x;
	   int y;
	   
	   while(numberOfBlocks < game.getNrBlocksPerLevel()) {
		   Random rand = new Random();
		   x = rand.nextInt(maxHor);
		   ++x;
		   y = rand.nextInt(maxVer);
		   ++y;
		   
		   BlockAssignment foundAssignment = level.findBlockAssignment(x, y);
		   while(foundAssignment != null) {
			   if(y < maxVer) {
				   if(x < maxHor) x++;
				   if(x >= maxHor) {
					   x = 1;
					   y++;
				   }
			   }
			   
			   else if(y >= maxVer) {
				   x = 1;
				   y = 1;
			   }  
			   foundAssignment = level.findBlockAssignment(x, y);
		   }
		    x = Game.WALL_PADDING + (x-1)*(Game.COLUMNS_PADDING+Block.SIZE);
		   y = Game.WALL_PADDING + (y-1)*(Game.ROW_PADDING+Block.SIZE);
		   
		   new PlayedBlockAssignment(
				   x,
				   y,
				   game.getRandomBlock(),
				   this
				   );
	   }
  }
  
 
  private void doHitPaddleOrWall() {
    this.bounceBall();
  }

  private void doOutOfBounds() {
    this.setLives(lives - 1);
    this.resetCurrentBallX();
    this.resetCurrentBallY();
    this.resetBallDirectionX();
    this.resetBallDirectionY();
    this.resetCurrentPaddleX();
  }

  private void doHitBlock() {
    int score = this.getScore();
    BouncePoint bounce = this.getBounce();
    PlayedBlockAssignment pblock = bounce.getHitBlock();
    Block block = pblock.getBlock();
    int bscore = block.getPoints();
    this.setScore(score + bscore);
    pblock.delete();
    this.bounceBall();
  }
  
  private boolean isCloser(BouncePoint first, BouncePoint second){
  	if (second == null){
  		return true;
  	}
  	if (first == null){
  		return false;
  	}
  	if (Math.sqrt(Math.pow((this.getCurrentBallX()-first.getX()),2.0)+Math.pow((this.getCurrentBallY()-first.getY()),2.0)) <
  		Math.sqrt(Math.pow((this.getCurrentBallX()-second.getX()),2.0)+Math.pow((this.getCurrentBallY()-second.getY()),2.0))){
  			return true;
  	}
  	else{
  	 return false;
  	}
  }

 private void doHitBlockNextLevel(){
    this.doHitBlock();
    int level = this.getCurrentLevel();
    this.setCurrentLevel(level+1);
    this.setCurrentPaddleLength(this.getGame().getPaddle().getMaxPaddleLength()-(this.getGame().getPaddle().getMaxPaddleLength()
    							-this.getGame().getPaddle().getMinPaddleLength())/(this.getGame().numberOfLevels()-1)*(this.getCurrentLevel()-1));
    this.setWaitTime(INITIAL_WAIT_TIME*Math.pow(this.getGame().getBall().getBallSpeedIncreaseFactor(),(double)(this.getCurrentLevel()-1)));
  }

  private void doHitNothingAndNotOutOfBounds() {
    
	double x = getCurrentBallX();
	double y = getCurrentBallY();
	double dx = getBallDirectionX();
	double dy = getBallDirectionY();
	
	setCurrentBallX(x + dx);
	setCurrentBallY(y + dy);
  }

  private void doGameOver() {
    Block223 block223 = this.getBlock223();
    
    Player p = this.getPlayer();
    
    if (p != null) {
    	
    	game = this.getGame();
    	HallOfFameEntry hof = new HallOfFameEntry(score, playername, p, game, block223);
    	game.setMostRecentEntry(hof);
    	
    }
    
    this.delete();
  }
}
