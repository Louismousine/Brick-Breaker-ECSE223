class PlayedGame {

  // State Machine
  
  playStatus {
    Ready {
      entry / { doSetup(); }
      play -> Moving;
    }
    Moving {
      pause -> Paused;
      move [hitPaddle()] / { doHitPaddleOrWall(); } -> Moving;
      move [isOutOfBoundsAndLastLife()] / { doOutOfBounds(); } -> GameOver;
      move [isOutOfBounds()] / { doOutOfBounds(); } -> Paused;
      move [hitLastBlockAndLastLevel()] / { doHitBlock(); } -> GameOver;
      move [hitLastBlock()] / { doHitBlockNextLevel(); } -> Ready;
      move [hitBlock()] / { doHitBlock(); } -> Moving;
      move [hitWall()] / { doHitPaddleOrWall(); } -> Moving;
      move / { doHitNothingAndNotOutOfBounds(); } -> Moving;
    }
    Paused {
      play -> Moving;
    }
    GameOver {
      entry / { doGameOver(); }
    }
  }
  
  // Guards
  
   private boolean hitPaddle() {
    BouncePoint bp = calculateBouncePointPaddle();
    this.setBounce(bp);
    return bp != null;
  }
  
    private BouncePoint calculateBouncePointPaddle() {
	// TODO Auto-generated method stub
	return null;
}

  private void bounceBall() {
	// TODO Auto-generated method stub
	
}

  private boolean isOutOfBoundsAndLastLife() {
    // TODO implement
    return false;
  }
  
  private boolean isOutOfBounds() {
    // TODO implement
    return false;
  }
  
  private boolean hitLastBlockAndLastLevel() {
    // TODO implement
    return false;
  }
  
  private boolean hitLastBlock(){
    // TODO implement
    return false;
  }
  
  private boolean hitBlock() {
    // TODO implement
    return false;
  }
  
  private boolean hitWall() {
    BouncePoint bp = calculateBouncePointWall();
    this.setBounce(bp);
    return bp != null;
  }
  
    private BouncePoint calculateBouncePointWall() {
	// TODO Auto-generated method stub
	return null;
}
  
  // Actions
  
  private void doSetup() {
    this.resetCurrentBallX();
	   this.resetCurrentBallY();
	   this.resetBallDirectionX();
	   this.resetBallDirectionY();	   
	   this.resetCurrentPaddleX();
	   Game game = this.getGame();
	   Level level = game.getLevel(this.getCurrentLevel() - 1);
	   List<BlockAssignment> assignments = level.getBlockAssignments();
	   
	   for(BlockAssignment assignment : assignments) {
		   PlayedBlockAssignment pblock = new PlayedBlockAssignment(
				   Game.WALL_PADDING + (Block.SIZE + Game.COLUMNS_PADDING) * (assignment.getGridHorizontalPosition() - 1),
				   Game.WALL_PADDING + (Block.SIZE + Game.ROW_PADDING) * (assignment.getGridVerticalPosition() - 1),
				   assignment.getBlock(),
				   this
				   );
	   }
	   
	   int numberOfBlocks = assignments.size();
	   int maxHor = (1+(Game.PLAY_AREA_SIDE-2*Game.WALL_PADDING-Block.SIZE)/(Block.SIZE+Game.COLUMNS_PADDING));
	   int maxVer = (1+(Game.PLAY_AREA_SIDE-Paddle.VERTICAL_DISTANCE-Game.WALL_PADDING-Paddle.PADDLE_WIDTH-Ball.BALL_DIAMETER-Block.SIZE)/(Block.SIZE+Game.ROW_PADDING));
	   int x;
	   int y;
	   
	   while(numberOfBlocks < game.getNrBlocksPerLevel()) {
		   Random rand = new Random();
		   x = rand.nextInt(maxHor);
		   ++x;
		   y = rand.nextInt(maxVer);
		   ++y;
		   
		   BlockAssignment foundAssignment = level.findBlockAssignment(x, y);
		   while(foundAssignment != null) {
			   if(y < maxVer) {
				   if(x < maxHor) x++;
				   if(x >= maxHor) {
					   x = 1;
					   y++;
				   }
			   }
			   
			   else if(y >= maxVer) {
				   x = 1;
				   y = 1;
			   }  
			   foundAssignment = level.findBlockAssignment(x, y);
		   }
		   
		   new PlayedBlockAssignment(
				   x,
				   y,
				   game.getRandomBlock(),
				   this
				   );
	   }
  }
  
 
  private void doHitPaddleOrWall() {
    this.bounceBall();
  }

  private void doOutOfBounds() {
    // TODO implement
  }

  private void doHitBlock() {
    int score = this.getScore();
    BouncePoint bounce = this.getBounce();
    PlayedBlockAssignment pblock = bounce.getHitBlock();
    Block block = pblock.getBlock();
    int bscore = block.getPoints();
    this.setScore(score + bscore);
    pblock.delete();
    this.bounceBall();
  }

  private void doHitBlockNextLevel() {
    // TODO implement
  }

  private void doHitNothingAndNotOutOfBounds() {
    // TODO implement
  }

  private void doGameOver() {
    // TODO implement
  }
  
  
}
